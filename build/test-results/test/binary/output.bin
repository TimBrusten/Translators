Reading character: v
#Starting identifier/keyword token
(Identifier/keyword token complete: var
var identifier
#<Symbol: IDENTIFIER, Lexeme: var>
Reading character:  
Reading character: x
#Starting identifier/keyword token
&Identifier/keyword token complete: x
x identifier
!<Symbol: IDENTIFIER, Lexeme: x>
Reading character:  
Reading character: i
#Starting identifier/keyword token
(Identifier/keyword token complete: int
int identifier
#<Symbol: IDENTIFIER, Lexeme: int>
Reading character:  
Reading character: =
equal detected
<Symbol: EQUAL, Lexeme: =>
Reading character:  
Reading character: 2
Starting number token
Number token complete: 2
<Symbol: NUMBER, Lexeme: 2>
Reading character: ;
semicolon detected
 <Symbol: SEMICOLON, Lexeme: ;>
End of input reached
(Symbol{type=EOF, lexeme='EOF', line=1}
